version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mixmyai-postgres
    environment:
      POSTGRES_USER: mixmyai
      POSTGRES_PASSWORD: mixmyai
      POSTGRES_DB: mixmyai
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mixmyai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mixmyai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Queue
  redis:
    image: redis:7-alpine
    container_name: mixmyai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mixmyai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (NestJS)
  api:
    build:
      context: ./backend/api
      dockerfile: Dockerfile
    container_name: mixmyai-api
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://mixmyai:mixmyai@postgres:5432/mixmyai
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - ORCHESTRATION_SERVICE_URL=http://orchestration:8000
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/api:/app
      - /app/node_modules
    networks:
      - mixmyai-network
    command: npm run start:dev

  # Backend Orchestration (Python FastAPI)
  orchestration:
    build:
      context: ./backend/orchestration
      dockerfile: Dockerfile
    container_name: mixmyai-orchestration
    environment:
      - PYTHON_ENV=development
      - DATABASE_URL=postgresql://mixmyai:mixmyai@postgres:5432/mixmyai
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/orchestration:/app
    networks:
      - mixmyai-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mixmyai-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:4000
      - NEXT_PUBLIC_WS_URL=ws://localhost:4000
    ports:
      - "3000:3000"
    depends_on:
      - api
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - mixmyai-network
    command: npm run dev

  # NGINX Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: mixmyai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api
    networks:
      - mixmyai-network
    profiles:
      - production

networks:
  mixmyai-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
